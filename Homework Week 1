-- QUESTION 1 -- 
docker --help
docker build -- help
docker run --help

-- QUESTION 2 --
pip install wheel
pip list



-- QUESTION 3 -- 
select  
count(distinct index)
from green_taxi_data
where cast(lpep_pickup_datetime as date) = '2019-09-18' 
and cast(lpep_dropoff_datetime as date) = '2019-09-18'


-- QUESTION 4 --
select 
trip_distance 
,cast(lpep_pickup_datetime as date) _start
from green_taxi_data
order by trip_distance desc
-- Manually checked the first record. Otherwise, window function with Rank or Row number would be helpful!



-- QUESTION 5 ---

select z."Borough", sum(total_amount)
from green_taxi_data gtd -- limit 1
join zones z on gtd."PULocationID" = z."LocationID"
where cast(lpep_pickup_datetime as date) = '2019-09-18' --  and '2019-09-30'
group by z."Borough"
having sum(total_amount) > 50000
order by sum(total_amount) desc


-- QUESTION 6 --
select z."Zone", dropoff_z."Zone", gtd."tip_amount"
from green_taxi_data gtd
join zones z on gtd."PULocationID" = z."LocationID"
join zones dropoff_z on gtd."DOLocationID" = dropoff_z."LocationID"
where cast(lpep_pickup_datetime as date) between '2019-09-01' and '2019-09-30'
and z."Zone" = 'Astoria'
order by gtd."tip_amount" desc

-- Question 7 -- 
@mitrev4795 ➜ /workspaces/ZoomCamp_2024_latest (main) $ cd terrademo/keys
@mitrev4795 ➜ /workspaces/ZoomCamp_2024_latest/terrademo/keys (main) $ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_bigquery_dataset.demo_dataset will be created
  + resource "google_bigquery_dataset" "demo_dataset" {
      + creation_time              = (known after apply)
      + dataset_id                 = "demo_dataset"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + id                         = (known after apply)
      + labels                     = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "US"
      + project                    = (known after apply)
      + self_link                  = (known after apply)
    }

  # google_storage_bucket.demo-bucket will be created
  + resource "google_storage_bucket" "demo-bucket" {
      + force_destroy               = true
      + id                          = (known after apply)
      + location                    = "US"
      + name                        = "warm-calculus-411320-terra-bucket"
      + project                     = (known after apply)
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "Delete"
            }
          + condition {
              + age                   = 30
              + matches_prefix        = []
              + matches_storage_class = []
              + matches_suffix        = []
              + with_state            = (known after apply)
            }
        }

      + versioning {
          + enabled = true
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes
  
google_bigquery_dataset.demo_dataset: Creating...
google_storage_bucket.demo-bucket: Creating...
google_bigquery_dataset.demo_dataset: Creation complete after 1s [id=projects/warm-calculus-411320/datasets/demo_dataset]
google_storage_bucket.demo-bucket: Creation complete after 2s [id=warm-calculus-411320-terra-bucket]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
